To create a complete React Todo list component with the specified features, we'll break down the implementation into several parts. We'll create a main TodoList component, sub-components for individual tasks and task addition, and CSS for styling. Here's how you can implement this:

### 1. TodoList Component

This component will manage the state of the list of tasks and render the TodoItem and AddTodo components.

```jsx
// TodoList.jsx
import React, { useState } from 'react';
import TodoItem from './TodoItem';
import AddTodo from './AddTodo';
import './TodoList.css';

const TodoList = () => {
    const [tasks, setTasks] = useState([]);

    const addTask = (task) => {
        setTasks([...tasks, { text: task, completed: false }]);
    };

    const toggleTaskCompletion = (index) => {
        const newTasks = [...tasks];
        newTasks[index].completed = !newTasks[index].completed;
        setTasks(newTasks);
    };

    const deleteTask = (index) => {
        const newTasks = tasks.filter((_, i) => i !== index);
        setTasks(newTasks);
    };

    return (
        <div className="todo-list">
            <h1>Todo List</h1>
            <AddTodo addTask={addTask} />
            <ul>
                {tasks.map((task, index) => (
                    <TodoItem
                        key={index}
                        task={task}
                        index={index}
                        toggleTaskCompletion={toggleTaskCompletion}
                        deleteTask={deleteTask}
                    />
                ))}
            </ul>
        </div>
    );
};

export default TodoList;
```

### 2. TodoItem Component

This component represents each individual task in the list.

```jsx
// TodoItem.jsx
import React from 'react';

const TodoItem = ({ task, index, toggleTaskCompletion, deleteTask }) => {
    return (
        <li className={`todo-item ${task.completed ? 'completed' : ''}`}>
            <span onClick={() => toggleTaskCompletion(index)}>
                {task.text}
            </span>
            <button onClick={() => deleteTask(index)}>Delete</button>
        </li>
    );
};

export default TodoItem;
```

### 3. AddTodo Component

This component provides a form to add new tasks.

```jsx
// AddTodo.jsx
import React, { useState } from 'react';

const AddTodo = ({ addTask }) => {
    const [inputValue, setInputValue] = useState('');

    const handleSubmit = (e) => {
        e.preventDefault();
        if (inputValue.trim()) {
            addTask(inputValue);
            setInputValue('');
        }
    };

    return (
        <form onSubmit={handleSubmit} className="add-todo">
            <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Add a new task"
            />
            <button type="submit">Add</button>
        </form>
    );
};

export default AddTodo;
```

### 4. CSS for Styling

The CSS file will ensure the UI is clean and responsive.

```css
/* TodoList.css */
.todo-list {
    max-width: 400px;
    margin: 0 auto;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    background-color: #f9f9f9;
    text-align: center;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
}

ul {
    list-style: none;
    padding: 0;
}

.todo-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    margin-bottom: 10px;
    border-radius: 4px;
    background-color: #fff;
    transition: background-color 0.3s;
}

.todo-item.completed span {
    text-decoration: line-through;
    color: #999;
}

.todo-item:hover {
    background-color: #f0f0f0;
}

.add-todo {
    display: flex;
    justify-content: space-between;
    margin-bottom: 20px;
}

.add-todo input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-right: 10px;
}

.add-todo button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: #fff;
    cursor: pointer;
    transition: background-color 0.3s;
}

.add-todo button:hover {
    background-color: #0056b3;
}
```

### 5. Sample App Component

This component demonstrates how to use the TodoList component in an application.

```jsx
// App.jsx
import React from 'react';
import TodoList from './TodoList';

const App = () => {
    return (
        <div className="app">
            <TodoList />
        </div>
    );
};

export default App;
```

### Explanation

- **TodoList Component**: Manages the state of tasks and renders a list of `TodoItem` components and the `AddTodo` component.
- **TodoItem Component**: Displays individual tasks, allowing users to toggle completion and delete tasks.
- **AddTodo Component**: Provides a form for entering new tasks, adding them to the list.
- **CSS**: Implements a clean, modern design with responsiveness. Flexbox is used for layout, and media queries could be added for further responsiveness if needed.

This setup provides a functional, interactive Todo list application using React, with a focus on clean code, responsiveness, and user-friendly design.